package cn.org.citycloud.zwhs.controller;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.org.citycloud.zwhs.bean.ServiceStoreBean;
import cn.org.citycloud.zwhs.bean.ServiceStoreSearchBean;
import cn.org.citycloud.zwhs.constants.ErrorCodes;
import cn.org.citycloud.zwhs.core.BaseController;
import cn.org.citycloud.zwhs.entity.ServiceInfo;
import cn.org.citycloud.zwhs.entity.ServiceStore;
import cn.org.citycloud.zwhs.entity.Store;
import cn.org.citycloud.zwhs.exception.BusinessErrorException;
import cn.org.citycloud.zwhs.repository.StoreDao;
import cn.org.citycloud.zwhs.service.ServiceInfoService;
import cn.org.citycloud.zwhs.service.ServiceStoreService;


@Controller
@RequestMapping("servicestore")
public class ServiceStoreController extends BaseController{
	
	@Autowired
	private ServiceStoreService serviceStoreService;
	
	@Autowired
	private StoreDao storeDao;
	
	@Autowired
	private ServiceInfoService serviceInfoService;
	
	/**
	 * 获取服务店铺列表
	 * 列表
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	@ResponseBody()
	public Object getServiceInfoList(@Valid ServiceStoreSearchBean bean,
			HttpServletRequest request,HttpServletResponse response) throws Exception, RuntimeException {

		Sort sort = new Sort(Direction.DESC, "id");
	    Pageable pageable = new PageRequest(bean.getPageNo() - 1, bean.getPageSize(), sort);
	    
	    ServiceStore serviceStore = new ServiceStore();
	    serviceStore.setStoreId(bean.getStore_id());
	    serviceStore.setServiceState(bean.getService_state());
	    serviceStore.setServiceVerify(bean.getService_verify());
	    ServiceInfo serviceInfo = new ServiceInfo();
	    serviceInfo.setServiceName(bean.getService_name());
	    serviceInfo.setType(bean.getService_type());
	    serviceStore.setServiceInfo(serviceInfo);
	    
		Page<ServiceStore> list = serviceStoreService.getServiceStoreList(pageable, serviceStore);
		return list;
	}
	
	/**
	 * 申请服务信息
	 * @return
	 */
	@RequestMapping(value = "/apply", method = RequestMethod.POST)
	@ResponseBody()
	public Object addGoodsClass(@Valid @RequestBody ServiceStoreBean bean,
			HttpServletRequest request,HttpServletResponse response) throws Exception, RuntimeException {

		ServiceStore serviceStore = new ServiceStore();
		
		int storeId = getStoreId();
		String companyName = getCompanyName();
		int userId = getUserId();
		
		if(storeId == 0){
			throw new BusinessErrorException(ErrorCodes.PARAM_ERROR, "店铺ID为空");
		}
		Store store = storeDao.findByStoreId(storeId);
		ServiceInfo serviceInfo = serviceInfoService.getServiceInfoById(bean.getServiceId());
		
		ServiceStore ss = serviceStoreService.getByStoreIdAndServiceId(storeId, bean.getServiceId());
		
		if(ss != null){
			throw new BusinessErrorException(ErrorCodes.PARAM_ERROR, "该服务已经申请！");
		}
		
		BeanUtils.copyProperties(bean, serviceStore);
		
		serviceStore.setStoreId(storeId);
		serviceStore.setContactsName(store.getStoreOwner());
		serviceStore.setContactsPhone(store.getUserPhone());
		serviceStore.setCompanyName(companyName);
		serviceStore.setUserId(userId);
		serviceStore.setServiceAddtime(serviceInfo.getServiceAddtime());
		
		return serviceStoreService.addServiceStoreById(serviceStore);
		
	}
	
	/**
	 * 上架、下架我的服务信息
	 * @return
	 */
	@RequestMapping(value = "/updown/{serviceStoreId}", method = RequestMethod.PUT)
	@ResponseBody()
	public Object updownServiceInfo(@PathVariable Integer serviceStoreId,
			@RequestBody Map<String, Object> params ) throws Exception, RuntimeException {
		
		Integer serviceState = (Integer)params.get("service_state");

		if(serviceStoreId == null || serviceState == null){
			
			throw new BusinessErrorException(ErrorCodes.PARAM_ERROR, "参数为空");
			
		}
		
		return serviceStoreService.updownServiceStoreById(serviceStoreId, serviceState);
	}
	
//	/**
//	 * 申请、审核、驳回 母婴店服务信息
//	 * @return
//	 */
//	@RequestMapping(value = "/options/{serviceStoreId}", method = RequestMethod.PUT)
//	@ResponseBody()
//	public Object checkServiceInfo(@PathVariable Integer serviceStoreId,
//			@RequestBody Map<String, Object> params ) throws Exception, RuntimeException {
//
//		Integer serviceVerify = (Integer)params.get("service_verify");
//		
//		if(serviceStoreId == null && serviceVerify == null){
//			
//			throw new BusinessErrorException(ErrorCodes.PARAM_ERROR, "参数为空");
//			
//		}
//		
//		return serviceStoreService.checkServiceStoreById(serviceStoreId, serviceVerify);
//	}
	
	
	/**
	 * 查看服务信息详情
	 * @return
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	@ResponseBody()
	public Object detailServiceInfo(
			@RequestParam(value = "service_store_id") Integer serviceStoreId) throws Exception, RuntimeException {

		if(serviceStoreId == null){
			
			throw new BusinessErrorException(ErrorCodes.PARAM_ERROR, "参数为空");
			
		}
		return serviceStoreService.getServiceStoreById(serviceStoreId);
		
	}
	
	
}
