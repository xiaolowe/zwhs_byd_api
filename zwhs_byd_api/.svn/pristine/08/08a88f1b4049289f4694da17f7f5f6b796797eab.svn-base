package cn.org.citycloud.zwhs.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import cn.org.citycloud.zwhs.bean.Order;
import cn.org.citycloud.zwhs.entity.StoreOrder;
import cn.org.citycloud.zwhs.repository.StoreOrderDao;

@Component
public class OrderService {
	
	@Autowired
	private StoreOrderDao storeOrderDao;
	
	public Page<StoreOrder> getOrderList(Order order){
		Sort sort = new Sort(Sort.Direction.DESC,"orderId");
		Pageable pageable = new PageRequest(order.getPage()-1, order.getPageSize(),sort);
		Specification<StoreOrder> spec = new Specification<StoreOrder>() {

			@Override
			public Predicate toPredicate(Root<StoreOrder> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				// TODO Auto-generated method stub
				Predicate predicate = cb.conjunction();
				int store_id = order.getStoreId();
				Path<Integer> storeId = root.get("storeId");
				predicate = cb.and(predicate,cb.equal(storeId, store_id));
				int status = order.getStatus();
				if(status!=-1){
					Path<Integer> orderStatus = root.get("orderStatus");
					predicate = cb.and(predicate,cb.equal(orderStatus, status));
				}
				int oId=order.getOrderId();
				if(oId!=0){
					Path<Integer> orderId = root.get("orderId");
					predicate = cb.and(predicate,cb.equal(orderId, oId));
				}
				String memName=order.getMemName();
				if(memName.length()>0){
					Path<String> contactsName = root.get("contactsName");
					predicate = cb.and(predicate,cb.like(contactsName, "%"+memName+"%"));
				}
				String cyName = order.getCompanyName();
				if(cyName.length()>0){
					Path<String> companyName = root.get("companyName");
					predicate = cb.and(predicate,cb.like(companyName, "%"+cyName+"%"));
				}
				if(order.getStartTime().length()>0&&order.getEndTime().length()>0){
					Path<Date> addTime = root.get("addTime");
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					Date stime=new Date();
					Date etime=new Date();
					try {
						stime = df.parse(order.getStartTime()+" 00:00:00");
						etime = df.parse(order.getEndTime()+" 23:59:59");
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						
					}
					
					predicate = cb.and(predicate,cb.between(addTime, stime, etime));
					
				}
				return query.where(predicate).getRestriction();
			}
			
		};
		return storeOrderDao.findAll(spec, pageable);
	}
}
